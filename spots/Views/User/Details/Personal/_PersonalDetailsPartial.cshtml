@using Microsoft.Ajax.Utilities
@using Microsoft.AspNet.Identity
@model spots.Models.User.ViewModels.UserPersonalViewModel

@{
    var isEditable = Model.Email == User.Identity.GetUserName();
}
    <!--Picture-->
    @Html.Partial("Details/Shared/_ProfilePicturePartial")

<div class="row" id="personal-details">
    <div class="col-sm-10 col-sm-offset-1">
    <!-- Html Form (calling ajax on submit)-->
    @using (Html.BeginForm("PersonalDetailsUpdate", "User", FormMethod.Post, new {id = "personalDetailsForm"}))
    {
        <!--Id-->
        @Html.TextBoxFor(m => m.MongoId, new {type = "hidden"})
        <!--Email-->
        @Html.TextBoxFor(m => m.Email, new {type = "hidden", @class= "user-email"})

        <!--Token-->
        @Html.AntiForgeryToken()

        <div class="row">
            <div class="col-sm-12 text-sm">
                <p class="no-padding no-margin color-standard text-left text-md">Personal information</p>
            </div>
        </div>
        <hr class="border-standard-light mg-xs-up"/>
        <div class="row">
            <div class="col-xs-10 col-xs-offset-1">
                <div class="row">
                    <div class="col-xs-8 col-xs-offset-0 col-md-8 col-md-offset-2">

                        <!--Property-->
                        <!--First name-->
                        <div class="property">
                            <!--Property row-->
                            <div class="row property-info pd-sm-down">
                                <div class="col-xs-3 text-left">
                                    <!--Property name -->
                                    @Html.LabelFor(m => m.FirstName)
                                </div>
                                <div class="col-xs-6">
                                        <!--Property value sent to controller-->
                                        @if (isEditable)
                                        {
                                            @Html.TextBoxFor(m => m.FirstName, new { @class = "property-value form-control", type = "text", data_bind = "value: firstNameInput, valueUpdate:'keyup'" })
                                            @Html.ValidationMessageFor(m => m.FirstName, "", new { @class = "text-danger" })

                                        }
                                        else
                                        {
                                            @Html.LabelForModel(Model.FirstName, new { type = "text", disabled = "true" })
                                        }
                                </div>
                                @if (isEditable)
                                {
                                    <div class="col-xs-1">
                                        <!--Remove button-->
                                        <button type="button" class="btn btn-sm btn-remove" data-bind="visible: isRemoveable(firstNameInput), click: clearInput.bind($data, personalViewModel.firstNameInput)">
                                            <span class="glyphicon glyphicon-remove" aria-hidden="true"></span>
                                        </button>
                                    </div>
                                    <div class="col-xs-1">
                                        <!--Refresh button-->
                                        <button type="button" class="btn btn-sm btn-confirm" data-bind="visible: isConfirmable(personalViewModel.firstName, firstNameInput), click: setInput.bind($data, personalViewModel.firstNameInput, personalViewModel.firstName)">
                                            <span class="glyphicon glyphicon-refresh" aria-hidden="true"></span>
                                        </button>
                                    </div>
                                    <div class="col-xs-1">
                                        <!--Confirm button-->
                                        <button type="submit" class="btn btn-sm btn-confirm" data-bind="visible: isConfirmable(personalViewModel.firstName, firstNameInput), click: submitOne.bind($data, personalViewModel.firstNameInput, 'FirstName', personalViewModel.firstName)">
                                            <span class="glyphicon glyphicon-ok" aria-hidden="true"></span>
                                        </button>
                                    </div>
                                }
                            </div>
                        </div>
                        <!--Property End-->
                        <!--Property-->
                        <!--Middle name-->
                        @if (isEditable || !Model.MiddleName.IsNullOrWhiteSpace())
                        {
                            <div class="property">
                                <!--Property row-->
                                <div class="row property-info pd-sm-down">
                                    <div class="col-xs-3 text-left">
                                        <!--Property name -->
                                        @Html.LabelFor(m => m.MiddleName)
                                    </div>
                                    <div class="col-xs-6">
                                        <!--Property value sent to controller-->
                                        @if (isEditable)
                                        {
                                            @Html.TextBoxFor(m => m.MiddleName, new {@class = "property-value form-control", type = "text", data_bind = "value: middleNameInput, valueUpdate:'keyup'"})
                                            @Html.ValidationMessageFor(m => m.MiddleName, "", new {@class = "text-danger"})
                                        }
                                        else
                                        {
                                            @Html.LabelForModel(Model.MiddleName, new {type = "text", disabled = "true"})
                                        }
                                    </div>
                                    @if (isEditable)
                                    {
                                        <div class="col-xs-1">
                                            <!--Remove button-->
                                            <button type="button" class="btn btn-sm btn-remove" data-bind="visible: isRemoveable(middleNameInput), click: clearInput.bind($data, personalViewModel.middleNameInput)">
                                                <span class="glyphicon glyphicon-remove" aria-hidden="true"></span>
                                            </button>
                                        </div>
                                        <div class="col-xs-1">
                                            <!--Refresh button-->
                                            <button type="button" class="btn btn-sm btn-confirm" data-bind="visible: isConfirmable(personalViewModel.middleName, middleNameInput), click: setInput.bind($data, personalViewModel.middleNameInput, personalViewModel.middleName)">
                                                <span class="glyphicon glyphicon-refresh" aria-hidden="true"></span>
                                            </button>
                                        </div>
                                        <div class="col-xs-1">
                                            <!--Confirm button-->
                                            <button type="submit" class="btn btn-sm btn-confirm" data-bind="visible: isConfirmable(personalViewModel.middleName, middleNameInput), click: submitOne.bind($data, personalViewModel.middleNameInput, 'MiddleName', personalViewModel.middleName)">
                                                <span class="glyphicon glyphicon-ok" aria-hidden="true"></span>
                                            </button>
                                        </div>
                                    }
                                </div>
                            </div>
                        }
                        <!--Property End-->
                        <!--Property-->
                        <!--Last name-->
                        <div class="property">
                            <!--Property row-->
                            <div class="row property-info pd-sm-down">
                                <div class="col-xs-3 text-left">
                                    <!--Property name -->
                                    @Html.LabelFor(m => m.LastName)
                                </div>
                                <div class="col-xs-6">
                                    <!--Property value sent to controller-->
                                    @if (isEditable)
                                    {
                                        @Html.TextBoxFor(m => m.LastName, new {@class = "property-value form-control", type = "text", data_bind = "value: lastNameInput, valueUpdate:'keyup'"})
                                        @Html.ValidationMessageFor(m => m.LastName, "", new {@class = "text-danger"})
                                    }
                                    else
                                    {
                                        @Html.LabelForModel(Model.LastName, new {type = "text", disabled = "true"})
                                    }
                                </div>
                                @if (isEditable)
                                {
                                    <div class="col-xs-1">
                                        <!--Remove button-->
                                        <button type="button" class="btn btn-sm btn-remove" data-bind="visible: isRemoveable(lastNameInput), click: clearInput.bind($data, personalViewModel.lastNameInput)">
                                            <span class="glyphicon glyphicon-remove" aria-hidden="true"></span>
                                        </button>
                                    </div>
                                    <div class="col-xs-1">
                                        <!--Refresh button-->
                                        <button type="button" class="btn btn-sm btn-confirm" data-bind="visible: isConfirmable(personalViewModel.lastName, lastNameInput), click: setInput.bind($data, personalViewModel.lastNameInput, personalViewModel.lastName)">
                                            <span class="glyphicon glyphicon-refresh" aria-hidden="true"></span>
                                        </button>
                                    </div>
                                    <div class="col-xs-1">
                                        <!--Confirm button-->
                                        <button type="submit" class="btn btn-sm btn-confirm" data-bind="visible: isConfirmable(personalViewModel.lastName, lastNameInput), click: submitOne.bind($data, personalViewModel.lastNameInput, 'LastName', personalViewModel.lastName)">
                                            <span class="glyphicon glyphicon-ok" aria-hidden="true"></span>
                                        </button>
                                    </div>
                                }
                            </div>
                        </div>
                        <!--Property End-->
                        <!--Property-->
                        <!--Age-->
                        @if (isEditable || Model.Age != 0)
                        {
                            <div class="property">
                                <!--Property row-->
                                <div class="row property-info pd-sm-down">
                                    <div class="col-xs-3 text-left">
                                        <!--Property name -->
                                        @Html.LabelFor(m => m.Age)
                                    </div>
                                    <div class="col-xs-6">
                                        <!--Property value sent to controller-->
                                        @if (isEditable)
                                        {
                                            @Html.TextBoxFor(m => m.Age, new {@class = "property-value form-control", type = "text", data_bind = "value: ageInput, valueUpdate:'keyup'"})
                                            @Html.ValidationMessageFor(m => m.Age, "", new {@class = "text-danger"})
                                        }
                                        else
                                        {
                                            @Html.LabelForModel(Model.Age.ToString(), new {type = "text", disabled = "true"})
                                        }
                                    </div>
                                    @if (isEditable)
                                    {
                                        <div class="col-xs-1">
                                            <!--Remove button-->
                                            <button type="button" class="btn btn-sm btn-remove" data-bind="visible: isRemoveable(ageInput), click: clearInput.bind($data, personalViewModel.ageInput)">
                                                <span class="glyphicon glyphicon-remove" aria-hidden="true"></span>
                                            </button>
                                        </div>
                                        <div class="col-xs-1">
                                            <!--Refresh button-->
                                            <button type="button" class="btn btn-sm btn-confirm" data-bind="visible: isConfirmable(personalViewModel.age, ageInput), click: setInput.bind($data, personalViewModel.ageInput, personalViewModel.age)">
                                                <span class="glyphicon glyphicon-refresh" aria-hidden="true"></span>
                                            </button>
                                        </div>
                                        <div class="col-xs-1">
                                            <!--Confirm button-->
                                            <button type="submit" class="btn btn-sm btn-confirm" data-bind="visible: isConfirmable(personalViewModel.age, ageInput), click: submitOne.bind($data, personalViewModel.ageInput, 'Age', personalViewModel.age)">
                                                <span class="glyphicon glyphicon-ok" aria-hidden="true"></span>
                                            </button>
                                        </div>
                                    }
                                </div>
                            </div>
                        }
                        <!--Property End-->
                    </div>
                    <div class="col-xs-2" id="add-remove-btn"></div>
                </div>
            </div>
        </div>

        <!--Save button-->
        if (isEditable)
        {
            <div class="row mg-md-up">
                <div class="col-xs-2 col-xs-offset-5">
                    <!--Restore button-->
                    <button type="button" title="Restore all" class="btn btn-sm btn-block" data-bind="visible : areAllConfirmable(), click : updateInputs">
                        <span class="glyphicon glyphicon-refresh" aria-hidden="true"></span> Restore all
                    </button>
                </div>
                <div class="col-xs-2">
                    <!--Save button-->
                    <button type="button" title="Save all" class="btn btn-sm btn-block btn-confirm" data-bind="click: submit">
                        <span class="glyphicon glyphicon-ok" aria-hidden="true"></span> Save all
                    </button>
                </div>
            </div>
        }
    }
    <!--HTML End-->
    <div id="user-ajax-response">

    </div>
    </div>
</div>

<!--Add/Remove user response-->
<div class="row mg-md-up">
    <div class="col-xs-3 col-xs-offset-5"id="add-remove-user-response"></div>
</div>

<!--Delete profile-->
@Html.Partial("Details/Personal/_DeleteProfilePartial", Model)

@Scripts.Render("~/bundles/ProfilePersonalDetails")
@Scripts.Render("~/bundles/jqueryval")
@Styles.Render("~/bundles/cssval")
@Scripts.Render("~/bundles/UserScripts")

<!--Personal view model-->
@Html.Partial("ViewModels/_PersonalDetailsViewModel")


